{"version":3,"sources":["Components/Timer/timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","time","autostart","onTick","step","useState","seconds","setSeconds","timeOn","setTimeOn","useEffect","interval","setInterval","prevTime","clearInterval","className","Math","floor","slice","onClick","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAGe,SAASA,EAAMC,GAC1B,IAAOC,EAAiCD,EAAjCC,KAAMC,EAA2BF,EAA3BE,UAAWC,EAAgBH,EAAhBG,OAAQC,EAAQJ,EAARI,KAChC,EAA8BC,mBAASJ,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAASH,GAArC,mBAAOM,EAAP,KAAeC,EAAf,KAiBA,OAfAC,qBAAU,WACN,IAAIC,EAAW,KAWf,OATIH,IACAG,EAAWC,aAAY,WACnBL,GAAW,SAAAM,GAAQ,OAAIA,EAAWT,KAClCD,EAAOG,KACR,KACCA,EAAU,GACVC,EAAWN,IAGZ,kBAAMa,cAAcH,MAC5B,CAACL,EAASE,IAGT,sBAAKO,UAAW,YAAhB,UACI,sBAAKA,UAAW,QAAhB,UACI,uBAAMA,UAAW,YAAjB,WAAgC,IAAMC,KAAKC,MAAOX,EAAU,IAAS,KAAKY,OAAO,GAAjF,OACA,sBAAMH,UAAW,YAAjB,UAAgC,IAAMC,KAAKC,MAAOX,EAAU,IAAQ,KAAKY,OAAO,QAEpF,sBAAKH,UAAW,kBAAhB,UACA,wBAAQI,QAAS,kBAAMV,GAAU,IAAjC,mBACA,wBAAQU,QAAS,kBAAMV,GAAU,IAAjC,kBACA,wBAAQU,QAAS,kBAAMZ,EAAWN,IAAlC,yBCjBGmB,MAZf,WACE,OACE,8BACE,cAACrB,EAAD,CAAOI,OAAQ,SAACG,GAAD,OAAae,QAAQC,IAAI,sBAAwBhB,IAC9DL,KAAM,IACNG,KAAM,IACNF,WAAW,OCGJqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8085cc82.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './timer.css';\r\n\r\nexport default function Timer(props) {\r\n    const {time, autostart, onTick, step} = props;\r\n    const [seconds, setSeconds] = useState(time)\r\n    const [timeOn, setTimeOn] = useState(autostart)\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n\r\n        if (timeOn) {\r\n            interval = setInterval(() => {\r\n                setSeconds(prevTime => prevTime - step)\r\n                onTick(seconds)\r\n            }, 1000)\r\n            if (seconds < 0) {\r\n                setSeconds(time)\r\n            }\r\n        }\r\n        return () => clearInterval(interval)\r\n    }, [seconds, timeOn])\r\n\r\n    return (\r\n        <div className={'container'}>\r\n            <div className={'table'}>\r\n                <span className={'num-style'}>{(\"0\" + Math.floor((seconds / 60000) % 60)).slice(-2)}:</span>\r\n                <span className={'num-style'}>{(\"0\" + Math.floor((seconds / 1000) % 60)).slice(-2)}</span>\r\n            </div>\r\n            <div className={'button-position'}>\r\n            <button onClick={() => setTimeOn(true)}>Start</button>\r\n            <button onClick={() => setTimeOn(false)}>Stop</button>\r\n            <button onClick={() => setSeconds(time)}>Reset</button>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import './App.css';\nimport Timer from './Components/Timer/timer.js';\n\nfunction App() {\n  return (\n    <div>\n      <Timer onTick={(seconds) => console.log('There is time left ' + seconds)}\n        time={8000}\n        step={1000}\n        autostart={true}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}